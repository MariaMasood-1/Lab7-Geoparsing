# -*- coding: utf-8 -*-
"""Maria_Masood_Lab6_Geoparsing

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jixcv6agegpEY_1abPyFUzBLmRTA8ELd
"""

#Import datavis libraries
import matplotlib.pyplot as plt
import seaborn as sns # used to set the style of the figuresurl = 'http://www.gutenberg.org/files/3176/3176-0.txt'# Check to see if geopandas is already loaded into your Colab environment: will return True or False
import sys
'geopandas' in sys.modules

# Install packages as needed
!pip install geopandas
!pip install geotext
!pip install numpy geotext
!pip install matplotlib
!pip install urllib #error
!pip install geopy
!pip install shapely
!pip install descartes
!pip install nltk

# Importing all the libraries we'll use
import geopandas as gpd
import pandas as pd
import nltk
import numpy as np
import matplotlib.pyplot as plt
import urllib.request#new
import descartes

from urllib import request
from geotext import GeoText
from geopy.geocoders import Nominatim
from geopy.exc import GeocoderTimedOut
from shapely.geometry import Point, Polygon

# Upload local script to Colab - running this creates a "choose file" button to upload local files.
# .shp file downloaded from https://hub.arcgis.com/datasets/a21fdb46d23e4ef896f31475217cbb08_1
from google.colab import files
uploaded = files.upload()

def geoparsing_map(url):
   response = request.urlopen(url)
   raw = response.read().decode('utf8')
   places = GeoText(raw)
   cities = list(places.cities)
   geolocator = Nominatim(user_agent='mamasood@clarku.edu', timeout=2) # requires your e-mail address to track usage. Timeout set for 2 seconds.

   lat_lon = []
   for city in cities:
     try:
       location = geolocator.geocode(city)
       if location:
        # If you want to see only lat/lon as they process you can include the following code here but I found it added a lot of time to the operation: print(location.latitude, location.longitude)
         lat_lon.append(location)
     except GeocoderTimedOut as e:
       print("Error: geocode failed on input %s with message %s">
          (city, e))
       
   df = pd.DataFrame(lat_lon, columns=['City Name', 'Coordinates'])
   geometry = [Point(x[1], x[0]) for x in df['Coordinates']]
  # coordinate system we're using
   crs = {'init': 'epsg:4326'}

  # convert df to geo df
   geo_df = gpd.GeoDataFrame(df, crs=crs, geometry=geometry)
  # world map .shp file we down/uploaded
   countries_map = gpd.read_file('Countries_WGS84.shp')

   f, ax = plt.subplots(figsize=(16, 16))
   countries_map.plot(ax=ax, alpha=0.4, color='grey')
   c= geo_df['geometry'].plot(ax=ax, markersize = 30, color = 'r', marker = '^', alpha=.4)
   



geoparsing('https://www.gutenberg.org/files/65451/65451-0.txt')

# Commented out IPython magic to ensure Python compatibility.
def geoparsing_chart(url):
   response = request.urlopen(url)
   raw = response.read().decode('utf8')
   places = GeoText(raw)
   cities = list(places.cities)
   geolocator = Nominatim(user_agent='mamasood@clarku.edu', timeout=2) # requires your e-mail address to track usage. Timeout set for 2 seconds.

   lat_lon = []
   for city in cities:
     try:
       location = geolocator.geocode(city)
       if location:
        # If you want to see only lat/lon as they process you can include the following code here but I found it added a lot of time to the operation: print(location.latitude, location.longitude)
         lat_lon.append(location)
     except GeocoderTimedOut as e:
       print("Error: geocode failed on input %s with message %s">
          (city, e))
       
   # Figures inline and set visualization style
#    %matplotlib inline
   sns.set()

   # Create freq dist and plot
   freqdist1 = nltk.FreqDist(cities)
   d= freqdist1.plot(20) #running this w/out an argument plots all words! Here, we're specifying the top 20
   return c



geoparsing('https://www.gutenberg.org/files/65451/65451-0.txt')   #Kill Me if You Can! by Randall Garrett